# team_recommender_app.py

import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# --- Synthetic Data ---
team_members = pd.DataFrame({
    'name': ['Alice', 'Bob', 'Charlie', 'Diana', 'Ethan'],
    'skills': [
        'python machine-learning data-science',
        'java spring backend api-development',
        'react javascript frontend ui-ux',
        'sql data-analysis visualization',
        'cloud aws devops docker kubernetes'
    ],
    'past_projects': [
        'built ML models for sales prediction',
        'developed RESTful APIs for ecommerce',
        'created UI for a healthcare dashboard',
        'analyzed survey data for marketing',
        'deployed cloud infrastructure for fintech'
    ]
})
team_members['profile'] = team_members['skills'] + ' ' + team_members['past_projects']

# --- Streamlit Interface ---
st.title("ðŸš€ Team Member Recommendation System")

st.subheader("Enter Project Details:")
project_title = st.text_input("Project Title", "AI-Powered Marketing Dashboard")
project_desc = st.text_area("Project Description", "Develop a dashboard with ML and interactive UI for marketing analytics")
required_skills = st.text_input("Required Skills", "python machine-learning data-visualization dashboard ui")

if st.button("Recommend Team Members"):
    # Build project profile
    project_profile = required_skills + ' ' + project_desc
    profiles = team_members['profile'].tolist() + [project_profile]

    # Vectorize and compute similarity
    vectorizer = TfidfVectorizer()
    profile_vectors = vectorizer.fit_transform(profiles)
    similarity_scores = cosine_similarity(profile_vectors[-1:], profile_vectors[:-1]).flatten()

    team_members['match_score'] = similarity_scores
    recommended = team_members.sort_values(by='match_score', ascending=False)

    st.subheader("Recommended Members:")
    st.dataframe(recommended[['name', 'skills', 'match_score']].reset_index(drop=True))

    st.markdown("âœ… Sorted by match score using TF-IDF & cosine similarity.")

